* source
** source
https://doc.rust-lang.org/stable/rust-by-example/
** avancée
Enums
https://doc.rust-lang.org/stable/rust-by-example/custom_types/structs.html
* articles about rust

** Using Rust for Scientific Numerical applications: Learning from Past Experiences 2021 Apr
https://blog.esciencecenter.nl/using-rust-for-scientific-numerical-applications-learning-from-past-experiences-798665d9f9f0
** 0 cost abstraction in rust
https://carette.xyz/posts/zero_cost_abstraction/
** fearless concurrency
https://doc.rust-lang.org/book/ch16-00-concurrency.html

** c/c++ benchmark
https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/rust.html
** why scientists are turning to rust
https://www.nature.com/articles/d41586-020-03382-2
* useful crates
** rustsim organisation
https://rustsim.org/
** ndarray (numpy like operations)
https://github.com/rust-ndarray/ndarray

** rayon (parallelisation)
https://doc.rust-lang.org/book/ch16-00-concurrency.html
** algebra
https://nalgebra.org/
** eigen values (article [[https://github.com/felipeZ/eigenvalues/blob/master/src/lib.rs][by a simulation developper]])
https://github.com/felipeZ/eigenvalues/blob/master/src/lib.rs
* the language
** hello world
#+begin_src rust
fn main() {
    // Statements here are executed when the compiled binary is called

    // Print text to the console with a newline at the end
    println!("Hello World!");
}
#+end_src

** comments
#+begin_src rust
// regular comments

/* 
comments that go as far as you want */ 

/* 
even
like
this
*/

// comments for docs:
/// generate library docs for following item
//! generate library docs for enclosing item
#+end_src

** formatting/printing
*** basics
printing is made easy with macros defined in "std::fmt"

- format!: write formatted text to String
- print!: same as format! but the text is printed to the console (io::stdout).
- println!: same as print! but a newline is appended.
- eprint!: same as print! but the text is printed to the standard error (io::stderr).
- eprintln!: same as eprint! but a newline is appended.
*** example
#+begin_src rust
fn main() {
    println!("{} days", 31);

    // Positional arguments can be used. Specifying an integer inside `{}`
    // determines which additional argument will be replaced. Arguments start
    // at 0 immediately after the format string
    println!("{0}, this is {1}. {1}, this is {0}", "Alice", "Bob");

    let pi = 3.141592;
    // .2 to only print 2 digits after the point for floats
    println!("pi = {0} is rougly {0:.2}", pi);

    // As can named arguments.
    println!("{subject} {verb} {object}",
             object="the lazy dog",
             subject="the quick brown fox",
             verb="jumps over");

    // Different formatting can be invoked by specifying the format character after a
    // `:`.
    println!("Base 10 repr:               {}",   69420);
    println!("Base 2 (binary) repr:       {:b}", 69420);
    println!("Base 8 (octal) repr:        {:o}", 69420);
    println!("Base 16 (hexadecimal) repr: {:x}", 69420);
    println!("Base 16 (hexadecimal) repr: {:X}", 69420);

    // You can right-align text with a specified width. This will output
    // "    1". 4 white spaces and a "1", for a total width of 5.
    println!("{number:>5}", number=1);

    // You can pad numbers with extra zeroes. This will output "00001".
    println!("{number:0>5}", number=1);

    // You can use named arguments in the format specifier by appending a `$`
    println!("{number:0>width$}", number=1, width=5);


    // Rust even checks to make sure the correct number of arguments are
    // used.
    println!("My name is {0}, {1} {0}", "Bond");
    // FIXME ^ Add the missing argument: "James"

    // Only types that implement fmt::Display can be formatted with `{}`. User-
    // defined types do not implement fmt::Display by default

    #[allow(dead_code)]
    struct Structure(i32);

    // This will not compile because `Structure` does not implement
    // fmt::Display
    //println!("This struct `{}` won't print...", Structure(3));
    // TODO ^ Try uncommenting this line

    // For Rust 1.58 and above, you can directly capture the argument from a
    // surrounding variable. Just like the above, this will output
    // "     1". 5 white spaces and a "1".
    let number: f64 = 1.0;
    let width: usize = 5;
    println!("{number:>width$}");
}

#+end_src
*** printing structs
[[https://doc.rust-lang.org/std/fmt/#formatting-traits][std::fmt documentation]]
**** code
#+begin_src rust
// structures cannot be printed either with `fmt::Display` or
// with `fmt::Debug` by default
struct UnPrintable(i32);

// The `derive` attribute automatically creates the implementation
// required to make this `struct` printable with `fmt::Debug`.
#[derive(Debug)]
struct DebugPrintable(i32);
#+end_src
**** pretty printing
***** default
So fmt::Debug definitely makes this printable but sacrifices some elegance. Rust also provides "pretty printing" with {:#?}.
#+begin_src rust
#[derive(Debug)]
struct Person<'a> {
    name: &'a str,
    age: u8
}

fn main() {
    let name = "Peter";
    let age = 27;
    let peter = Person { name, age };

    // Pretty print
    println!("{:#?}", peter);
}
#+end_src

prints:

#+begin_src 
Person {
    name: "Peter",
    age: 27,
}
#+end_src

One can manually implement fmt::Display to control the display.

***** customized

fmt::Debug is not always nice, but we can manually implement
fmt::Display, which uses {} print marker

#+begin_src rust
#![allow(unused)]
fn main() {
use std::fmt;

struct Structure(i32);

// To use the `{}` marker in formatted strings, 
// the trait `fmt::Display` must be implemented
// manually for the type.

impl fmt::Display for Structure {
    // This trait requires `fmt` with this exact signature.
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        // Write strictly the first element into the supplied output
        // stream: `f`. Returns `fmt::Result` which indicates whether the
        // operation succeeded or failed. Note that `write!` uses syntax which
        // is very similar to `println!`.
        write!(f, "{}", self.0)
    }
}
}

#+end_src

other examples:

#+begin_src rust
#[derive(Debug)]
struct MinMax(i64, i64);

// Implement `Display` for `MinMax`.
impl fmt::Display for MinMax {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        // Use `self.number` to refer to each positional data point.
        write!(f, "({}, {})", self.0, self.1)
    }
}

// Define a structure where the fields are nameable for comparison.
#[derive(Debug)]
struct Point2D {
    x: f64,
    y: f64,
}

// Similarly, implement `Display` for `Point2D`
impl fmt::Display for Point2D {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        // Customize so only `x` and `y` are denoted.
        write!(f, "x: {}, y: {}", self.x, self.y)
    }
}

#+end_src

**** iterables
For structures where each element must be handled sequentially, the
problem is that each write! generates a fmt::Result.

Proper handling of this requires dealing with all the results. Rust
provides the ? operator for exactly this purpose.
#+begin_src rust
// Try `write!` to see if it errors. If it errors, return
// the error. Otherwise continue.
write!(f, "{}", value)?;
#+end_src

example with struct "List" containing a Vec of i32
#+begin_src rust
use std::fmt; // Import the `fmt` module.

// Define a structure named `List` containing a `Vec`.
struct List(Vec<i32>);

impl fmt::Display for List {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        // Extract the value using tuple indexing,
        // and create a reference to `vec`.
        let vec = &self.0;

        write!(f, "[")?;

        // Iterate over `v` in `vec` while enumerating the iteration
        // count in `count`.
        for (count, v) in vec.iter().enumerate() {
            // For every element except the first, add a comma.
            // Use the ? operator to return on errors.
            if count != 0 { write!(f, ", ")?; }
            write!(f, "{}", v)?;
        }

        // Close the opened bracket and return a fmt::Result value.
        write!(f, "]")
    }
}

fn main() {
    let v = List(vec![1, 2, 3]);
    println!("{}", v);
}

#+end_src

**** traits
***** idea
when you print something, you can use "{}", which is the default
Display [[https://doc.rust-lang.org/std/fmt/#formatting-traits][trait]] when there are no argument in {}:
#+begin_src rust
println!("{}", str)
#+end_src

but also other [[https://doc.rust-lang.org/std/fmt/#formatting-traits][traits]]:
{:b} for representation in binary
ect... (check manual page of formatting)

each of these can be changed
***** example
#+begin_src rust
use std::fmt::{self, Formatter, Display};

struct City {
    name: &'static str,
    // Latitude
    lat: f32,
    // Longitude
    lon: f32,
}

impl Display for City {
    // `f` is a buffer, and this method must write the formatted string into it
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        let lat_c = if self.lat >= 0.0 { 'N' } else { 'S' };
        let lon_c = if self.lon >= 0.0 { 'E' } else { 'W' };

        // `write!` is like `format!`, but it will write the formatted string
        // into a buffer (the first argument)
        write!(f, "{}: {:.3}°{} {:.3}°{}",
               self.name, self.lat.abs(), lat_c, self.lon.abs(), lon_c)
    }
}

#[derive(Debug)]
struct Color {
    red: u8,
    green: u8,
    blue: u8,
}

impl Display for Color {
    // `f` is a buffer, and this method must write the formatted string into it
    fn fmt(&self, f: &mut Formatter) -> fmt::Result {
        // let lat_c = if self.lat >= 0.0 { 'N' } else { 'S' };
        // let lon_c = if self.lon >= 0.0 { 'E' } else { 'W' };

        // `write!` is like `format!`, but it will write the formatted string
        // into a buffer (the first argument)
        // this prints RGB (R, G, B) representation in hex
        write!(f, "RGB ({0}, {1}, {2}) 0x{0:0>2X}{1:0>2X}{2:0>2X} ",
                self.red, self.green, self.blue)
    }
}

fn main() {
    for city in [
        City { name: "Dublin", lat: 53.347778, lon: -6.259722 },
        City { name: "Oslo", lat: 59.95, lon: 10.75 },
        City { name: "Vancouver", lat: 49.25, lon: -123.1 },
    ].iter() {
        println!("{}", *city);
    }
    for color in [
        Color { red: 128, green: 255, blue: 90 },
        Color { red: 0, green: 3, blue: 254 },
        Color { red: 0, green: 0, blue: 0 },
    ].iter() {
        // Switch this to use {} once you've added an implementation
        // for fmt::Display.
        println!("{:?}", *color);
        println!("{}", *color);
    }
}

#+end_src
**** example
#+begin_src rust
// Derive the `fmt::Debug` implementation for `Structure`. `Structure`
// is a structure which contains a single `i32`.
#[derive(Debug)]
struct Structure(i32);

// Put a `Structure` inside of the structure `Deep`. Make it printable
// also.
#[derive(Debug)]
struct Deep(Structure);

fn main() {
    // Printing with `{:?}` is similar to with `{}`.
    println!("{:?} months in a year.", 12);
    println!("{1:?} {0:?} is the {actor:?} name.",
             "Slater",
             "Christian",
             actor="actor's");

    // `Structure` is printable!
    println!("Now {:?} will print!", Structure(3));
    
    // The problem with `derive` is there is no control over how
    // the results look. What if I want this to just show a `7`?
    println!("Now {:?} will print!", Deep(Structure(7)));
}
#+end_src
** types
*** variable definition example
**** example 1
#+begin_src rust
fn main() {
    // Variables can be type annotated.
    let logical: bool = true;

    let a_float: f64 = 1.0;  // Regular annotation
    let an_integer   = 5i32; // Suffix annotation

    // Or a default will be used.
    let default_float   = 3.0; // `f64`
    let default_integer = 7;   // `i32`
    
    // A type can also be inferred from context 
    let mut inferred_type = 12; // Type i64 is inferred from another line
    inferred_type = 4294967296i64;
    
    // A mutable variable's value can be changed.
    let mut mutable = 12; // Mutable `i32`
    mutable = 21;
    
    // Error! The type of a variable can't be changed.
    mutable = true;
    
    // Variables can be overwritten with shadowing.
    let mutable = true;
}

#+end_src
**** example 2
Integers 1, floats 1.2, characters 'a', strings "abc", booleans true
and the unit type () can be expressed using literals.

Integers can, alternatively, be expressed using hexadecimal, octal or
binary notation using these prefixes respectively: 0x, 0o or 0b.

Nice readability: you can add "_"!
- 1_000 is the same as 1000
- 0.000_001 is the same as 0.000001

We need to tell the compiler the type of the literals we use. For now,
we'll use the u32 suffix to indicate that the literal is an unsigned
32-bit integer, and the i32 suffix to indicate that it's a signed
32-bit integer.

The operators available and their precedence [[https://doc.rust-lang.org/reference/expressions.html#expression-precedence][in Rust]] are similar to
other [[https://en.wikipedia.org/wiki/Operator_precedence#Programming_languages][C-like languages]].

#+begin_src rust
fn main() {
    // Integer addition
    println!("1 + 2 = {}", 1u32 + 2);

    // Integer subtraction
    println!("1 - 2 = {}", 1i32 - 2);
    // TODO ^ Try changing `1i32` to `1u32` to see why the type is important

    // Short-circuiting boolean logic
    println!("true AND false is {}", true && false);
    println!("true OR false is {}", true || false);
    println!("NOT true is {}", !true);

    // Bitwise operations
    println!("0011 AND 0101 is {:04b}", 0b0011u32 & 0b0101);
    println!("0011 OR 0101 is {:04b}", 0b0011u32 | 0b0101);
    println!("0011 XOR 0101 is {:04b}", 0b0011u32 ^ 0b0101);
    println!("1 << 5 is {}", 1u32 << 5);
    println!("0x80 >> 2 is 0x{:x}", 0x80u32 >> 2);

    // Use underscores to improve readability!
    println!("One million is written as {}", 1_000_000u32);
}


#+end_src
*** scalar types

- signed integers
  - i8
  - i16
  - i32 (default integer)
  - i64
  - i128
  - isize (pointer size)
- unsigned integers
  - u8
  - u16
  - u32
  - u64
  - u128
  - usize (pointer size)
- floating point
  - f32
  - f64 (default float)
- char Unicode scalar values like 'a', 'α' and '∞' (4 bytes each)
- bool either true or false
- the unit type (), whose only possible value is an empty tuple: ()

Despite the value of a unit type being a tuple, it is not considered a
compound type because it does not contain multiple values.  

*** compound types

- arrays like [1, 2, 3]
- tuples like (1, true)

Variables can always be type annotated. Numbers may additionally be
annotated via a suffix or by default. Integers default to i32 and
floats to f64. Note that Rust can also infer types from context.
*** tuples
#+begin_src rust
use std::fmt;
// Tuples can be used as function arguments and as return values
fn reverse(pair: (i32, bool)) -> (bool, i32) {
    // `let` can be used to bind the members of a tuple to variables
    let (int_param, bool_param) = pair;

    (bool_param, int_param)
}

// The following struct is for the activity.
#[derive(Debug)]
struct Matrix(f32, f32, f32, f32);


fn transpose(matrix: Matrix) -> Matrix
{
    let transposed = Matrix(
    matrix.0, matrix.2,
    matrix.1, matrix.3);
    (transposed)
}


impl fmt::Display for Matrix {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "({}, {})\n", self.0, self.1)?;
        write!(f, "({}, {})", self.2, self.3)
    }
}

fn main() {
    // A tuple with a bunch of different types
    let long_tuple = (1u8, 2u16, 3u32, 4u64,
                      -1i8, -2i16, -3i32, -4i64,
                      0.1f32, 0.2f64,
                      'a', true);

    // Values can be extracted from the tuple using tuple indexing
    println!("long tuple first value: {}", long_tuple.0);
    println!("long tuple second value: {}", long_tuple.1);

    // Tuples can be tuple members
    let tuple_of_tuples = ((1u8, 2u16, 2u32), (4u64, -1i8), -2i16);

    // Tuples are printable
    println!("tuple of tuples: {:?}", tuple_of_tuples);
    
    // But long Tuples (more than 12 elements) cannot be printed
    // let too_long_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13);
    // println!("too long tuple: {:?}", too_long_tuple);
    // TODO ^ Uncomment the above 2 lines to see the compiler error

    let pair = (1, true);
    println!("pair is {:?}", pair);

    println!("the reversed pair is {:?}", reverse(pair));

    // To create one element tuples, the comma is required to tell them apart
    // from a literal surrounded by parentheses
    println!("one element tuple: {:?}", (5u32,));
    println!("just an integer: {:?}", (5u32));

    //tuples can be destructured to create bindings
    let tuple = (1, "hello", 4.5, true);

    let (a, b, c, d) = tuple;
    println!("{:?}, {:?}, {:?}, {:?}", a, b, c, d);

    let matrix = Matrix(1.1, 1.2, 2.1, 2.2);
    println!("{:?}", matrix);
    println!("{}", matrix);
    println!("transposed one:");
    println!("{}", transpose(matrix));

}

#+end_src
*** arrays
type signature:
[type; length]

collection of objects of the same type, stored in contiguous memory,
length known at compile time

slices are like vetors but the length isn't known at compile time

#+begin_src rust
use std::mem;

fn main() {
    // Fixed-size array (type signature is superfluous)
    let xs: [i32; 5] = [1, 2, 3, 4, 5];

    // All elements can be initialized to the same value
    let ys: [i32; 3] = [0; 3]; // = [0, 0, 0]

    // Indexing starts at 0
    println!("first element of the array: {}", xs[0]);
    println!("second element of the array: {}", xs[1]);

    // `len` returns the count of elements in the array
    println!("number of elements in array: {}", xs.len());

    // Arrays are stack allocated
    println!("array occupies {} bytes", mem::size_of_val(&xs));

    // Arrays can be automatically borrowed as slices
    println!("borrow the whole array as a slice {:?}", &xs);

    // Arrays can be safely accessed using `.get`, which returns an
    // `Option`. This can be matched as shown below, or used with
    // `.expect()` if you would like the program to exit with a nice
    // message instead of happily continue.
    for i in 0..xs.len() + 1 { // OOPS, one element too far
        match xs.get(i) {
            Some(xval) => println!("{}: {}", i, xval),
            None => println!("Slow down! {} is too far!", i),
        }
    }
}

#+end_src
*** slices
type signature:
&[type]

slices are slices of arrays
#+begin_src rust
fn main() {
    // Fixed-size array (type signature is superfluous)
    let xs: [i32; 5] = [1, 2, 3, 4, 5];

    // All elements can be initialized to the same value
    let ys: [i32; 5] = [0; 5]; // = [0, 0, 0, 0, 0]

    // Slices can point to a section of an array
    // They are of the form [starting_index..ending_index]
    // starting_index is the first position in the slice
    // ending_index is one more than the last position in the slice
    println!("borrow a section of the array as a slice {:?}", &ys[1 .. 4]);

    // Example of empty slice `&[]`
    let empty_array: [u32; 0] = [];
    assert_eq!(&empty_array, &[]);
    assert_eq!(&empty_array, &[][..]); // same but more verbose

}

#+end_src
*** custom types
**** struct
***** C structs
#+begin_src rust
// An attribute to hide warnings for unused code.
#![allow(dead_code)]

#[derive(Debug)]
struct Person {
    name: String,
    age: u8,
}

// A struct with two fields
struct Point {
    x: f32,
    y: f32,
}

// Structs can be reused as fields of another struct
struct Rectangle {
    // A rectangle can be specified by where the top left and bottom right
    // corners are in space.
    top_left: Point,
    bottom_right: Point,
}

fn main() {
    // Create struct with field init shorthand
    let name = String::from("Peter");
    let age = 27;
    let peter = Person { name, age };

    // Print debug struct
    println!("{:?}", peter);

    // Instantiate a `Point`
    let point: Point = Point { x: 10.3, y: 0.4 };

    // Access the fields of the point
    println!("point coordinates: ({}, {})", point.x, point.y);

    // Make a new point by using struct update syntax to use the fields of our
    // other one
    let bottom_right = Point { x: 5.2, ..point };

    // `bottom_right.y` will be the same as `point.y` because we used that field
    // from `point`
    println!("second point: ({}, {})", bottom_right.x, bottom_right.y);

    // Destructure the point using a `let` binding
    let Point { x: left_edge, y: top_edge } = point;

    let rectangle = Rectangle {
        // struct instantiation is an expression too
        top_left: Point { x: left_edge, y: top_edge },
        bottom_right: bottom_right,
    };

    // you can use the values of a struct of struct like this:
    let Rectangle { 
        top_left : Point {x: xa, y: ya},
        bottom_right : Point {x: xb, y: yb}} = rectangle;
    println!("point a: {} {}, point b: {} {}", xa, ya, xb, yb);
}

#+end_src
***** tuple structs (named tuples)
#+begin_src rust
// A tuple struct
struct Pair(i32, f32);

// Instantiate a tuple struct
let pair = Pair(1, 0.1);

// Access the fields of a tuple struct
println!("pair contains {:?} and {:?}", pair.0, pair.1);

// Destructure a tuple struct
let Pair(integer, decimal) = pair;

println!("pair contains {:?} and {:?}", integer, decimal);
#+end_src
***** unit structs (field-less)
#+begin_src rust
// A unit struct
struct Unit;
// Instantiate a unit struct
let _unit = Unit;
#+end_src
**** enum
** sublte_stuff
*** macros
**** the difference between functions and macros
From rust documentation

- The Difference Between Macros and Functions

Fundamentally, macros are a way of writing code that writes other
code, which is known as metaprogramming. In Appendix C, we discuss the
derive attribute, which generates an implementation of various traits
for you. We’ve also used the println! and vec! macros throughout the
book. All of these macros expand to produce more code than the code
you’ve written manually.

Metaprogramming is useful for reducing the amount of code you have to
write and maintain, which is also one of the roles of
functions. However, macros have some additional powers that functions
don’t.

A function signature must declare the number and type of parameters
the function has. Macros, on the other hand, can take a variable
number of parameters: we can call println!("hello") with one argument
or println!("hello {}", name) with two arguments. Also, macros are
expanded before the compiler interprets the meaning of the code, so a
macro can, for example, implement a trait on a given type. A function
can’t, because it gets called at runtime and a trait needs to be
implemented at compile time.

The downside to implementing a macro instead of a function is that
macro definitions are more complex than function definitions because
you’re writing Rust code that writes Rust code. Due to this
indirection, macro definitions are generally more difficult to read,
understand, and maintain than function definitions.

Another important difference between macros and functions is that you
must define macros or bring them into scope before you call them in a
file, as opposed to functions you can define anywhere and call
anywhere.
